시작>
안녕하세요. 4팀 Query Union 의 팀장을 맡은 조권호입니다. 먼저 팀명 선정 이유부터 간락히 말씀드리면, 쿼리란 데이터베이스에서 정보를 검색하기 위해 요청하는 것을 의미합니다. 쿼리와 연합을 뜻하는 유니온을 이어서 팀원간 서로 정보를 요청하고 협력하는 의미로 팀 이름을 Query Union으로 정했습니다. 프로젝트 타이틀인 ESTube는 YouTube와 이스트소프트의 EST를 합쳐 타이틀을 지었습니다.

다음 장> '목차'
목차는 다음과 같이 사전조사-프로젝트 요약-주요 개발 내용-개발 소감-MVP발표 순으로 진행하겠습니다. 

다음 장> '사전 조사'
처음은 사전 조사내용입니다.

다음 장> '사전 조사 내용'
먼저 Notion에 공유된 Figma 디자인 시안을 참고하여 전반적인 사용자 인터페이스 구조와 컴포넌트 배치 방식을 분석했습니다. 그리고 실제 YouTube 를 참고하여 페이지 레이아웃 구성과 주요 기능 동작 방식을 학습해 적용할 인사이트를 도출했습니다.

다음 장> '프로젝트 요약'
다음은 저희 프로젝트에 대해 간략히 알려드리겠습니다.

다음 장> '목표 및 배경'
먼저 목표 및 배경입니다. 처음엔 깃허브부터 HTML, CSS 그리고 자바스크립트까지 이전까지 학습한 내용을 프로젝트에 적용해보고 익혀감으로써 개발 역량 및 팀 협업 능력을 키워가는 것으로 전반적인 프로젝트를 진행했습니다.

다음 장> '필수 구현 기능'
필수 구현 기능에 대해 간략히 설명드리겠습니다. 기본 구조와 스타일을 왼쪽 항목의 상단바-사이드바-메인페이지-채널페이지-비디오페이지로 구성했으며, 자바스크립트로 검색-구독-플레이어재생-댓글 등의 상호작용을 수행하고 그리고 핵심 요구사항인 AI API 연동을 해서 사용자가 보고 있는 재생 영상 관련한 다음 추천 영상을 제공합니다.

다음 장> '추가 구현 기능'
다음으로 필수 기능을 넘어 자율적으로 구현한 기능들입니다. 각 기능들은 학습을 통해 익힌 내용을 최대한 적용하기 위해 노력했고, 목록에 나오는 상세 구현 내용은 시연을 통해 소개하도록 하겠습니다.

다음 장> '주요 개발 내용'
다음은 주요 개발 내용에 대해 안내해드리고 시연을 통해 프로젝트가 실제로 어떻게 동작하는지 보여드리도록 하겠습니다.

다음 장> '조원별 주요 개발 기능'
프로젝트에서 각 팀원이 진행한 내용을 한눈에 확인할 수 있도록 정리한 내용입니다.
먼저 저는 상단바와 메인페이지 일부의 HTML을 작성했고, CSS는 메인페이지 일부분과 채널페이지를 작성했습니다. 그리고 메인페이지의 상호작용 자바스크립트를 작성했고 탑바 및 사이드바를 모듈화하여 동적으로 로드하게 작성하였습니다. 단어 AI API 호출 및 추천 재생목록 알고리즘도 작성하였습니다. 또한 메인 페이지의 태그 별로 동작하는 필터기능과 고급 필터 버튼으로 정렬 및 사용자선택에 따른 필터 기능도 구현하였습니다.

다음 장>...정연님 내용
다음으로 권정연 팀원의 구현 내용입니다. 메인 페이지 카드 UI와 채널 페이지의 HTML을 작성하고, 상단바와 비디오 페이지에 대한 CSS를 완성했습니다. 모든 페이지에 태블릿·모바일 환경을 고려한 반응형 미디어 쿼리를 구현했으며, 채널 페이지에서는 API를 호출하고, 응답으로 받은 채널 정보를 동적으로 렌더링했습니다. 또한, 테마 변경 기능을 추가해 버튼 클릭만으로 다크/라이트 모드를 전환할 수 있도록 했습니다. 비디오 페이지에는 댓글 추가·좋아요·싫어요·수정·삭제 기능을 구현하고, 댓글 내용을 로컬 스토리지에 저장해 새로 고침 후에도 유지되도록 했습니다. 채널 페이지의 대표 비디오 섹션을 수정하고, 채널 페이지 비디오 카드 스타일을 보완했고 그리고 메인 페이지 썸네일 이미지 및 비디오 카드를 다듬는 등 여러 CSS를 다루었습니다.

다음 장>...동혁님 내용
마지막으로 유동혁 팀원의 구현 내용입니다. HTML은 사이드바와 비디오 페이지, CSS는 사이드바, 메인 페이지 카드 UI를 작업했습니다. 자바스크립트는 비디오 페이지를 작업했고, 모든 페이지에서 공통적으로 호출되는 API, 유틸리티 메서드, 공통 UI 호출 메서드를 통합해서 모듈화했습니다. 또 탑바와 사이드바의 검색 기능, 구독 채널 조회 기능을 만들었습니다. 고도화 작업으로는 비디오 플레이어의 html, css, js를 전부 커스텀해서 새로운 비디오 플레이어를 만들었고, 비디오 좋아요/싫어요 기능과 태그 버튼을 이용한 검색 기능도 만들었습니다. 비디오 카드 UI에 마우스를 올렸을 때 돌아가는 기능도 만들었습니다.

다음 장>'프로젝트 개발 기능 시연'
이어서 이제 본격적으로 시연을 통해 보여드리도록 하겠습니다.

시연 배포사이트이동>
이 프로젝트는 바닐라 자바스크립트로 작업을 진행하였습니다. 처음에는 회의를 통해 리액트 라이브러리를 프로젝트에 사용하려했으나 프로젝트 기간이 충분히 길지 않기 때문에 팀원의 학습 곡선에 부담이 적은 쪽을 선택했습니다. 먼저 상단바, 사이드바와 같이 공통적으로 나타나는 UI는 모듈화해서 페치를 통해 연결했습니다. 이제 메인 페이지를 소개하겠습니다. 메인 페이지는 상단바, 사이드바 필터바, 동영상 카드UI로 구성되어 있습니다. 상단바 좌측, 유튜브 로고 왼쪽에 있는 메뉴 버튼을 클릭하면 사이드바가 미니 사이드바로 변환됩니다. 상단바 중앙에 있는 검색창에 검색어를 넣고 돋보기 버튼을 누르거나 엔터키를 입력하면 검색어에 해당하는 영상 목록을 보여줍니다. 상단바의 유튜브 로고 혹은 사이드바의 홈영역을 클릭하면 다시 메인 화면으로 돌아올 수 있습니다. 사이드바는 홈, 구독, 좋아요한 비디오, 구독한 채널 목록, 다크/라이트 모드 토글버튼으로 구성되어 있습니다. 구독을 클릭하면 사용자가 구독한 채널의 영상 목록만을 보여줍니다. 좋아요한 비디오는 사용자가 좋아요를 누른 영상 목록을 보여줍니다. 구독 채널 목록의 각 채널을 누르면 해당 채널 페이지로 이동합니다. 다크/라이트 모드를 누르면 다크 테마와 라이트 테마를 토글로 전환할 수 있습니다. 필터바 좌측의 필터 버튼을 누르면 좋아요 수를 기준으로 영상을 필터링할 수 있습니다. 해당 영역을 응용하면 추후 재생 시간 1분 미만의 짧은 비디오, 1분이상 1시간 미만의 적당한 비디오, 초과하는 긴 비디오 등으로 필터할 수 있습니다. 정렬 기준에는 업로드 날짜가 빠른 순, 조회수가 많은 순으로 정렬할 수 있습니다. 두 개를 조합하여 좋아요 수가 적은 영상들을 조회수가 많은 순으로 정렬할 수도 있습니다. 필터 버튼 우측에는 모든 영상의 태그들이 버튼으로 중복없이 나열되게 하였습니다. 화살표 버튼으로 스크롤이 가능하고 각 버튼을 클릭하면 해당 태그의 영상이 나타납니다. 영상에 마우스를 호버하면 0.5초 후 미리보기가 재생됩니다. 또한 마우스의 움직임에 따라서 마치 카드처럼 입체적인 모습을 볼 수 있습니다. 영상을 누르면 해당 비디오 페이지로 이동하고 채널 프로필이미지를 누르면 해당 채널페이지로 넘어갑니다. 

1번 영상을 눌러 비디오 페이지로 이동>
다음은 비디오 페이지입니다. 비디오 페이지는 비디오 플레이어, 동영상 정보, 채널 정보, 댓글창, 연관 동영상 목록으로 이루어져 있습니다. 비디오 플레이어는 HTML, CSS, 자바스크립트를 모두 직접 커스텀하였으며, 화면 클릭시 일시정지, 시간조절 슬라이더, 재생버튼, 음소거버튼, 음량조절슬라이더, 배속버튼, PIP모드, 전체화면으로 이루어져 있습니다. 비디오 플레이어 하단에는 동영상 정보란이 있습니다. 동영상 제목 위에 해당 영상의 태그로 만들어진 버튼이 있습니다. 이 버튼을 누르면 해당 태그를 검색어로 활용하여 검색페이지로 넘어갑니다. 동영상 정보란 우측에는 좋아요/싫어요 버튼이 있습니다. 좋아요를 누르면 좋아요한 영상 목록에 저장되며 클릭시 애니메이션이 재생됩니다. 버튼을 길게 누르면 아이콘이 점점 커집니다. 채널 정보란 우측에 구독 버튼이 있습니다. 해당 버튼을 클릭하면 구독 상태에 따라서 버튼 문구와 색이 바뀌고, 구독 채널 목록이 업데이트 되어서 사이드바에 적용됩니다. 다음은 댓글 기능입니다. 댓글 입력창에 댓글을 입력하여 엔터키를 누르면 댓글을 추가할 수 있고, 추가한 후에도 수정, 삭제가 가능합니다. 댓글도 좋아요/싫어요를 할 수 있습니다. 비디오 페이지의 우측에는 관련 동영상 목록이 있습니다. 관련 동영상 목록을 정렬하는 기준은 이렇게 정렬합니다. 먼저 자기 자신을 제외한 모든 영상의 리스트에서 해당 영상과 일치하는 태그를 가장 많이 가진 영상들만 남깁니다. 화면 상의 영상의 경우 일치하는 태그를 2개 가진 영상들만 남았습니다. 처음 영상은 동물, 토끼, 새끼로 현재영상의 동물 고양이 새끼와 비교했을 때 동물과 새끼 태그 2개가 일치합니다. 마찬가지로 두번째 영상은 동물 토끼 새끼 중 동물과 새끼 태그가 일치하고, 세번째 영상도 동물 곰 새끼 중 동물과 새끼 태그가 일치합니다. 다음으로 현재 영상의 남는 태그인 고양이와 관련 영상의 남는 태그인 토끼와 곰의 유사도를 각각 구해 고양이태그와 유사도가 높은 토끼태그를 가진 영상이 목록의 상단을 차지했습니다. 정리하면, 현재 재생중인 영상의 태그를 가지고 일치하는 태그가 가장 많은 영상들을 찾고 일치한 태그를 제외해서 남아있는 태그와 단어 유사성을 비교하여 가장 유사도가 높은 영상을 목록에 먼저 나타냅니다. 이 방식을 선택한 이유는 현재 재생중인 영상의 태그와 나머지 영상들의 태그를 전부 비교하면 연속호출제한 오류코드 상황이 발생하기 때문에 API 호출을 최소화 했습니다. 이제 채널 정보란의 채널 프로필을 눌러 채널 페이지로 넘어가겠습니다.

채널 페이지 이동>
채널페이지는 채널 배너, 대표 동영상, 채널에서 업로드한 동영상으로 구성되어 있습니다. 채널 배너의 우측에도 구독 버튼이 있습니다. 비디오 페이지와 동일하게 구독 및 취소가 가능합니다. 채널 배너 아래에는 대표 동영상이 음소거 상태로 무한히 재생되고 있습니다. 대표 동영상의 제목, 조회수, 게시일, 설명 등은 영상 우측에 표시됩니다. 대표 동영상 아래에는 채널에서 올린 영상 목록이 있습니다. 메인 페이지나 비디오 페이지와 동일하게, 마우스 커서의 움직임에 따라 영상이 돌아갑니다. 

메인페이지로이동>
이제 다양한 사용 환경에 대응하기 위해서, 브라우저 너비에 따라 적절하게 변형되는 반응형 웹을 적용한 것을 보여드리겠습니다. 사이드바는 브라우저 너비가 좁아지면 자연스럽게 닫히고, 탑바도 좁아짐에 따라 최소한의 UI를 제외한 버튼을은 사라집니다. 영상 카드 UI에는 그리드를 적용해서 카드의 크기와 한 행에 표시되는 카드의 개수가 유연하게 변합니다. 채널 페이지에서도 동일하게 변합니다. 대표 동영상의 제목, 정보, 설명의 위치도 적절하게 변경됩니다. 구독하기 버튼도 우측에서 하단으로 변경됩니다. 비디오 페이지에서도 추천 영상 목록이 우측에 있다가 댓글창의 하단으로 이동합니다. 이상으로 시연을 마치고 질문없으시면 이어서 발표하도록 하겠습니다.

다음 장>'개발 소감'
다음으로 개발 소감을 말씀드리면서 마무리하도록 하겠습니다.

다음 장>'인상깊었던 기능'
프로젝트 기간 중 가장 인상깊었던 기능과 이유를 설명드리겠습니다. 저는 인상 깊었던 기능으로 추천 목록 알고리즘을 선정했습니다. 기능을 구현하면서 429 HTTP 오류코드 등을 해결하고 어떻게 하면 API요청을 최소화할 수 있을까 고민했던 것들이 제일 기억에 남았습니다. 권정연 팀원은 인상 깊었던 기능으로 테마 변경 토글 기능을 선정했습니다. '버튼 하나로 CSS 변수를 통째로 바꿔 전체 페이지 색상을 (다크테마-화이트테마)전환하는 구조를 구현하면서 CSS와 자바스크립트만으로도 스타일을 손쉽게 제어할 수 있다는 점이 신기했으며 특히 변수를 지정하는 것만으로 페이지 분위기를 간편하게 바꿀 수 있다는 점에서 코드의 효율성과 편리함을 직접 느꼈다.'고 합니다. 유동혁 팀원은 인상 깊었던 기능으로 버튼 클릭 애니메이션과 커스텀 비디오 플레이어를 선정했습니다. 이유는 두 기능 다 라이브러리를 사용하면 좀 더 편하게 만들 수 있기 때문이고, 라이브러리 없이 바닐라 자바스크립트만으로 최대한 구현하려다 보니 어려움이 있었고 또 해결하는 재미를 느낄 수 있었다고 합니다.

다음 장>'팀 커뮤니케이션'
팀 의사소통은 디스코드를 중심으로 이루어졌는데요, 프로젝트 초기에 업무 및 역할을 분담하였고 실시간 음성대화, 채팅 메세지를 통하여 회의·협의를 진행하였습니다. 문제 발생 시에는 팀원들과 공유하여 이견 조율과 이슈들을 해결하였습니다. 그리고 만든 결과를 공유하고 피드백을 하면서 기능 점검,-코드 리뷰,-개선 아이디어 제안 등을 진행했습니다.

다음 장>'개발 중 장애물 & 극복방법'
다음은 개발 중 마주한 문제과 극복한 방법을 간결하게 정리했습니다. 첫 번째 문제는 HTML에 data-video-id로 데이터셋 속성을 주고 자바스크립트에서 접근할 때 발생한 문제입니다. 데이터셋은 하이픈 속성을 자동으로 카멜케이스로 바꿔 처리하기 때문에 다음과 같이 항상 카멜케이스로 접근하도록 통일하여 문제를 해결하였습니다. 두 번째 문제는 검색 입력 필드에서 한글만 입력되고, 그 외 영문숫자특수문자 등은 아예 입력되지 않는 현상입니다. keypress 이벤트리스너에서 ‘preventDefault()’를 모든 키에 적용해버려 발생한 논리오류로 일반키 입력자체가 차단되었기때문에 발생한 문제로 다음과 같이 keypress 핸들러를 Enter키 입력일때만 동작하도록 처리하여 해결했습니다. 

다음 장>이어서...
세번째 문제는 테마 변경 토글 기능시 스크립트가 동작하지 않은 문제입니다. 스크립트 로딩 순서, 동적 로딩으로 인한 이벤트 미적용, 초기 테마 상태 동기화 문제가 원인이었고 데이터셋을 활용하고 ‘DOMContentLoaded’(돔컨텐트 로디드) 와 ‘MutationObserver’(뮤테이션옵저버)로 사이드바 로드 시점 감지 및 토글 초기화를 동적으로 실행한 뒤 사이드바 로드 완료 후 CustomEvent를 발행해 문제를 해결하였습니다. 

다음 장>'추가 / 리서치 하고 싶은 기능'
향후 추가로 적용할 수 있는 기능들의 아이디어를 모아봤습니다.
시청 기록 기능은 사용자가 본 영상 목록이 나타나 유저 편의성을 높일 수 있습니다.
알림 기능은 새 영상, 새 댓글, 구독 등 알림, 시청 유도 및 서비스에 머무르는 시간 높일 수 있습니다.
소셜 공유 기능은 SNS으로 바로 공유하는 연동으로 신규 사용자 유입을 촉진시킬 수 있습니다.
더보기 기능은 구독 목록, 댓글 목록 등의 데이터가 많을 때 더 보여주는 기능으로, 구현하려했으나 구현이 후순위로 밀리다가 추가하지 못하였습니다.
또 유튜브의 특성상 개인화된 상호작용이 많은데, 로그인 기능을 통해 각 계정의 정보에 접근이 가능해지면 계정별 구독/댓글/영상과 추천영상알고리즘 등 로그인이 필요한 기능들이 더 잘 구현될 것 입니다.
무한 스크롤 기능은 추후 무수히 많은 영상이 있을때 모든 영상을 한번에 로드할 수는 없으므로 사용자가 스크롤할수록 일정 수의 영상을 계속 로드할 수 있는 기능
이어보기 기능은 사용자가 마지막으로 영상을 본 시점을 기억해두었다가 해당 영상에 다시 진입하면 그 시점부터 재생해주는 기능입니다.

다음 장>'우리 조의 MVP'
마지막으로 팀의 MVP와 선정 이유를 발표하겠습니다.

다음 장>'우리 조의 MVP는?'
4팀 쿼리 유니온의 MVP는 제가 선정되었습니다. 그 이유는 깃허브 관리부터 프로젝트 진행 상황 관리 등 사소하지만 반드시 필요한 업무를 책임감있게 전담하고 팀 전체의 원할한 프로젝트 진행에 도움이 되었기 때문에 MVP로 선정하였습니다.

다음 장>'감사합니다'
이상으로 발표를 마치겠습니다. 추가로 궁금하신 부분이 있으시다면 질문에 최대한 답변해드리겠습니다. 감사합니다.